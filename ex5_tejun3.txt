
apache2のインストール後

     実験５用のWiFiに接続されているwebブラウザから
         http://localhost  或いは http://172.16.11.xx (Raspberry PIのIPアドレス)
     でapacheの初期画面が出ることを確認する
     Raspberry pi からは 
         $ curl http://localhost  或いは http://172.16.11.xx (Raspberry PIのIPアドレス)
     でHTMLの内容がテキストで表示されることを確認する

     実験室のPC側からは
           http://192.168.35.250:100xx
                      ★ xxには各席時の番号を入れる
     で、アクセスできるようにネットワーク設定をしてある


-----------------------------------------------------------------------

php5のインストール後

     $ sudo vi /var/www/html/phpinfo.php
     に 
        <?php phpinfo(); ?>
     を記入
     http://localhost/phpinfo.php  或いは http://172.16.11.xx/phpinfo.php 
                                          (Raspberry PIのIPアドレス)
     で、phpが動作しているかどうかのチェック

        実験室のPC側からは
              http://192.168.35.250:100xx/phpinfo.php
                        ★ xxには各席時の番号を入れる
        で、アクセスできるようにネットワーク設定をしてある


-----------------------------------------------------------------------

実験１ 

     $ sudo vi /var/www/html/ictex5.php
     に
      　<html>
      　<body>
     　 <?php
        　 echo "Request URI = ". $_SERVER['REQUEST_URI']. "<br>\r\n";
        　 foreach ($_GET as $key => $value){
     　   	echo $key . " = " . $value . "<br>\r\n";
 　        }
 　     ?>
     　 </body>
     　 </html>
     を記入して, esp-wroom32の web clientのが動作することを確認する

     実験課題：サンプルプログラムでは、ADCの値だけが送られてくるが
               その時刻も同時に送るようにプログラム(WROOM側）を変更
               する
     レポート課題１ 受取った数値をサーバ側で区別して保存するには
                    どのようにすればよいかを考察する
                    （実装はしなくてもよい）

-----------------------------------------------------------------------

pythonのインストール
　   $ sudo apt-get install python3 python3-dev build-essential python-pip
     $ sudo pip3 install --upgrade pip

flaskなどのインストール
     $ sudo apt-get install python3-numpy
     $ sudo apt-get install python3-pandas
     $ sudo apt-get install python3-flask

         参考：flaskはアドホックにwebサーバーを構築するためのツール群
               numpyはpythonの数値計算ツール群
               pandasは様々な分析を行うためのツール群
               この中に matplotlib というグラフ作成ツールが含まれており
               実験ではこれを利用する
               （他の機能については、興味があれば自分で調べて下さい）

自分のディレクトリ(フォルダ）（書き込める任意の場所で構わない）
     $ vi test-flask.py (ファイル名は適当な名前で良い)

       from flask import Flask

       app=Flask(__name__)

       @app.route('/')
       def hello():
           return 'Hello Flask!'

       if __name__ == '__main__':
             app.run(host="0.0.0.0", port=5000)

     を記入して、(★字下げには意味があるので注意★）
       $ python3 test-flask.py
     を実行し、ブラウザで、
           http://localhost:5000  或いは http://172.16.11.xx:5000
     をアクセスして
           Hello Flask!
     が表示されるのを確認する

     実験室のPC側からは
           http://192.168.35.250:50xx
                      ★ xxには各席時の番号を入れる
     で、アクセスできるようにネットワーク設定をしてある

flaskについては、http://flask.pocoo.org を参照して下さい

--------------------------------------------------------------------------

実験2 flaskで作成したweb serverでWROOM32からのリクエストを受ける
      (ictex5.phpのpython flask 版をテストする）

    WROOM32側のプログラムの変更
    ★アクセスするwebサーバ名を変更する
    esp32-http-request/main/http_request_example_main.c
    ファイルの先頭の方で
       #define WEB_SERVER "172.16.11.xx"
       #define WEB_PORT "5000"
       #define WEB_URL "http://172.16.11.xx:5000/getadc?ADC="
    と書き換えて、      ★ xxには各席時の番号を入れる

    ★アクセスするwebサーバのポート番号を変更する
    http_get_taskの関数中の
         int err = getaddrinfo(WEB_SERVER, "80", &hints, &res);
    を 
         int err = getaddrinfo(WEB_SERVER, WEB_PORT, &hints, &res);
    と書き換えて、

       make
       make flash
       make monitor

    flaskのプログラム
    ictex-wroom.py

       from flask import Flask,request,jsonify; 
       app = Flask(__name__)

       @app.route("/")
       def hello():
           return "Hello World !!"

       @app.route("/getadc",methods=['GET'])
       def getadc():
           print( "Request = {}".format( request.args ) )
           adc_value=request.args.get('ADC', type=int)
           print( "ADC = ", adc_value)
           return jsonify( adc=adc_value)

       if __name__ == "__main__":
            app.run(host="0.0.0.0", port=5000, debug=True)

     をRapberry PI側のログインシェルで
       　$ python3 ictex-wroom.py
     として実行する（以下のflaskプログラムも同様）

     動作は raspberry pi の画面 及び make monitor側のweb serverからの返値で
     確認する

     実験課題：サンプルプログラムでは、ADCの値だけが送られてくるが
               その時刻TIMEも同時に送るようにプログラム(WROOM側, flask側）を
               変更せよ
               ★１秒毎程度の計測になるので、センサ部分をある程度長く
                 触っていないとADCの値の変化がわからないかもしれません

     参考：現在の時刻はCの標準関数として、
       #include <time.h>
       #include <sys/time.h>
     をインクルードした上で、
       time_t now;
       time(&now);
     で得られる．

     考察課題：上のtime()で得られる時刻は、UNIX標準時として得られるが、
               ESP-WROOM32では起動したときからの時刻となってしまう
               これを他の機器と合わせるにはどうすればよいか調べて
               レポートに記入せよ


-----------------------------------------------------------------------

実験3 flaskで作成したweb serverでWROOM32からのリクエストを受けて
      データを蓄積して、グラフ表示してみる

    WROOM32側のプログラム：そのまま(実験課題のTIMEも送るようになっている方がよい）

    flaskのプログラム: testFlask_ex1.py

     Rapberry PI側のログインシェルで
       　$ python3 testFlask_ex1.py
     として実行する（以下のflaskプログラムも同様）

     動作は raspberry pi のweb serverをブラウザでアクセスして確認する
     実験室のPC上からは
           http://192.168.35.250:50xx/graph1
                                  ★ xxには各席時の番号を入れる
     でアクセスできる（ネットワークを設定してあります）

     この実験用のWiFiにつながっているPC上からは
           http://172.16.11.xx:5000/graph1
     で、グラフ表示が得られる（ADCの値はActiveHapticのセンサー部分で
     値が変わるので、変化が確認できるようにしてみて下さい） 


     実験課題：サンプルプログラムでは、受取ったデータのカウントに対する
               ADCの値をグラフ表示しているが、時刻TIMEに沿ってデータを
               表示するようにプログラム(WROOM側, flask側）を変更せよ
               ★１秒毎程度の計測になるので、センサ部分をある程度長く
                 触っていないと変化がとれません

-----------------------------------------------------------------------

実験4 flaskで作成したweb serverでActiveHapticのADC信号ログをとれるように
        ESP WROOM32のActiveHapticプログラムおよびflask側のプログラムを書き換える
      （グラフ表示機能付き）
        WROOM32側のプログラムで 1000ms毎にその時刻のADCの値をRapberry PIの
        webサーバに送付する

        サンプルプログラム: ESP-WROOM32側   main_ex1.cpp
                            Raspberry Pi側  testFlask_ex1.py (上記のまま)

        ★ESP-WROOM32側のプログラムでは各自のWiFi環境及びRaspberry Piについて
          最初の部分を適宜書き換える必要がある

        // need to rewrite for WiFi AP
        #define WIFI_SSID "ICT-EX5"     <--- このSSID
        #define WIFI_PASS "embedded"
        // **** need to rewrite for your RPi ****
        // RPi Flask
        #define WEB_SERVER "172.16.11.249"    <--- このアドレス
        #define WEB_PORT "5000"
        #define WEB_URL "http://172.16.11.249:5000/getadc?"  <--- このアドレス


     実験課題：サンプルプログラムでは、受取ったデータのカウントに対する
               ADCの値をグラフ表示しているが、時刻TIMEに沿ってデータを
               表示するようにプログラム(WROOM側, flask側双方）を変更せよ
               表示されたグラフのスクリーンコピーを提出して下さい
               ★１秒毎程度の計測になるので、センサ部分をある程度長く
                 触らないと変化がとれません

-----------------------------------------------------------------------

実験5 実験4のプログラムを変更して、
      RaspberryPI flaskで作成したweb serverでActiveHapticの周波数（FREQ)を
      受け付けて（記入して）、その値をESP WROOM32側で受取り、モーターの
      パラメータを変更する
      パラメータはADCの値をESP WROOM32からRaspberryPIに送付する際に
      返信の形でESP WROOM32に戻される

      サンプルプログラム: ESP-WROOM32側   main_ex2.cpp
                          Raspberry Pi側  testFlask_ex2.py

      この実験用のWiFiにつながっているPC上からは
           http://172.16.11.xx:5000/input_freq
      実験室のPC上からは
           http://192.168.35.250:50xx/input_freq
                                  ★ xxには各席時の番号を入れる
      で、周波数の値を記入するwebにアクセスできる。
      make monitorで周波数の値をきちんと受取れているか確認して
      下さい

-----------------------------------------------------------------------

実験6（発展） 
      実験4のプログラムを変更して、ADCの信号をより時間間隔を短くして受取る
      にはどうすればよいかを考えて、実装してみて下さい．
      時間間隔が短くなる場合は、時間関数をtime()で取得するよりも
      ESP-WROOM32に搭載されているより精密な時計関数
          esp_timer_get_time();
      を使うとよい

-----------------------------------------------------------------------

実験6については、進行をみて、11時過ぎにヒントのプログラムを与える

        サンプルプログラム: ESP-WROOM32側   main_ex3.cpp
                            Raspberry Pi側  testFlask_ex3.py

-----------------------------------------------------------------------

時間のある人向け

ESP WROOM32をweb serverにするプログラムも参考までに動かしてみて下さい



-----------------------------------------------------------------------
